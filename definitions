##################
# Config Options #
##################
FASTDIRACT_DIR=~/.fastdiract
FASTDIR_FILE=$FASTDIRACT_DIR/fastdir
FASTDIR_CTX_POSTSWITCH_CMD="d0"
FASTACT_FILE=$FASTDIRACT_DIR/fastact
FASTVIM_FILE=$FASTDIRACT_DIR/fastvim
FASTGDB_FILE=$FASTDIRACT_DIR/fastgdb
FASTDIR_POSTCMD="eza"
FASTDIR_ECHO="off"

FASTACT_ECHO="on"
FASTACT_CONF="off"
FASTACT_MENU_CONF="off"
FASTACT_D_RUNS_MENU="off"
FASTACT_F_RUNS_MENU="off"
FASTACT_V_RUNS_MENU="off"

GREEN='\033[1;32m'
CTX_COLOR=$GREEN
NC='\033[1;0m'

####################
# Helper Functions #
####################
fastdir_run () {
  if [ "$FASTDIR_ECHO" == "on" ]; then
    echo "$@"
  fi
  # NOTE: must use eval to expand envvars
  eval "$@"
}

fastact_run () {
  if [ "$FASTACT_ECHO" == "on" ]; then
    echo "$@"
  fi
  if [ "$FASTACT_CONF" == "on" ]; then
    # NOTE: must use eval to expand envvars
    echo -n "Execute [y/n]? "
    reply=$(bash -c "read -n 1 c; echo \$c")
    if [ "$reply" != "${reply#[Yy]}" ]; then
      echo ""
      eval "$@"
    fi
  else
    eval "$@"
  fi
}

fastdiract_get_fastdir_ctx() {
  basename "$(readlink -f $FASTDIR_FILE)" | sed 's/fastdir__//'
}

fastdiract_get_fastact_ctx() {
  basename "$(readlink -f $FASTDIR_FILE)" | sed 's/fastact__//'
}

fastdiract_get_fastvim_ctx() {
  basename "$(readlink -f $FASTDIR_FILE)" | sed 's/fastvim__//'
}

fastdiract_get_fastgdb_ctx() {
  basename "$(readlink -f $FASTDIR_FILE)" | sed 's/fastgdb__//'
}

#######################
# Fastdir Definitions #
#######################
alias d0='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d0 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d1='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d1 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d2='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d2 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d3='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d3 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d4='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d4 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d5='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d5 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d6='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d6 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d7='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d7 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d8='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d8 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'
alias d9='fastdir_run cd \"$(cat $FASTDIR_FILE | grep "d9 = " | cut -d"=" -f 2- | sed "s/~/\$HOME/" | xargs)\" && $FASTDIR_POSTCMD'

alias d0.='sed -i --follow-symlinks "s|d0 =.*$|d0 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d1.='sed -i --follow-symlinks "s|d1 =.*$|d1 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d2.='sed -i --follow-symlinks "s|d2 =.*$|d2 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d3.='sed -i --follow-symlinks "s|d3 =.*$|d3 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d4.='sed -i --follow-symlinks "s|d4 =.*$|d4 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d5.='sed -i --follow-symlinks "s|d5 =.*$|d5 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d6.='sed -i --follow-symlinks "s|d6 =.*$|d6 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d7.='sed -i --follow-symlinks "s|d7 =.*$|d7 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d8.='sed -i --follow-symlinks "s|d8 =.*$|d8 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d9.='sed -i --follow-symlinks "s|d9 =.*$|d9 = $(pwd | sed "s|^$HOME|~|")|g" $FASTDIR_FILE'
alias d?='echo -e "${CTX_COLOR}[$(fastdiract_get_fastdir_ctx)]${NC}"; cat $FASTDIR_FILE | grep "d[0-9]"'

d() {
  if [ "$FASTACT_D_RUNS_MENU" == "on" ]; then
    dm
  else
    d?
  fi
}

dm() {
  if ! [ "$#" == 1 -a "$1" == "quiet" ]; then
    d?
  fi
  echo -n "> "
  reply=$(bash -c "read -n 1 c; echo \$c")
  echo ""
  local cmd=""
  if [ "$reply" == "." ]; then
    echo -n "Save cwd to: "
    reply=$(bash -c "read -n 1 c; echo \$c")
    cmd="d${reply}."
    eval "$cmd"
  elif [ "$reply" == "w" ]; then
    dw
  elif [ "$reply" == "x" ]; then
    dx
  elif [ "$reply" == "X" ]; then
    dX
  elif [ "$reply" == "-" ]; then
    d-
  elif [[ "$reply" =~ [0-9] ]]; then
    cmd="d${reply}"
    eval "$cmd"
  elif [ "$reply" == "?" ]; then
    echo "= COMMANDS =========================================="
    echo ". Set dir     w Swap dirs       x Change context"
    echo "? Show help   0-9 Jump to dir   X Create new context"
    echo "- Delete context"
    echo "====================================================="
    dm "quiet"
  else
    echo "invalid cmd \"$reply\""
  fi
}

dw() {
  echo "Swap directories:"
  echo -n "> "
  dirnum1=$(bash -c "read -n 1 c; echo \$c")
  echo ""
  if [[ $dirnum1 =~ [0-9] ]]; then
    echo -n "> "
    dirnum2=$(bash -c "read -n 1 c; echo \$c")
    echo ""
    if [[ $dirnum2 =~ [0-9] ]]; then
      dir1="$(cat $FASTDIR_FILE | grep 'd'${dirnum1}' = ' | cut -d'=' -f 2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      dir2="$(cat $FASTDIR_FILE | grep 'd'${dirnum2}' = ' | cut -d'=' -f 2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      sed -i --follow-symlinks "s|d${dirnum1} =.*$|d${dirnum1} = $dir2|g" $FASTDIR_FILE
      sed -i --follow-symlinks "s|d${dirnum2} =.*$|d${dirnum2} = $dir1|g" $FASTDIR_FILE
      d?
    fi
  fi
}

dx() {
  choice="$(ls -1 $FASTDIRACT_DIR/fastdir__* | while read line; do echo $(basename $line) | sed 's/fastdir__//' ; done | fzf --prompt="Change fastdir ctx from [$(fastdiract_get_fastdir_ctx)] to: " --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastdirs__{}' | grep 'd[0-9]'" --preview-window=wrap)"
  # Test to handle case where fzf was cancelled
  if [ -n "$choice" ]; then
    unlink "$FASTDIR_FILE"
    ln -s "$FASTDIRACT_DIR/fastdirs__${choice}" "$FASTDIR_FILE"
    d?
    eval $FASTDIR_CTX_POSTSWITCH_CMD
  fi
}

dX() {
  echo -n "Create new fastdir ctx? [y/n] "
  user_resp=$(bash -c "read -n 1 c; echo \$c")
  if [ "$user_resp" == "y" ]; then
    echo -n "\nEnter new ctx name: "
    read new_ctx
    echo -ne "Use ${CTX_COLOR}[$new_ctx]${NC} as new ctx name? [y/n] "
    user_resp=$(bash -c "read -n 1 c; echo \$c")
    if [ "$user_resp" == "y" ]; then
      echo -ne "\nCreate ${CTX_COLOR}[$new_ctx]${NC} from an existing ctx? [y/n] "
      user_resp=$(bash -c "read -n 1 c; echo \$c")
      if [ "$user_resp" == "y" ]; then
        base="$(ls -1 $FASTDIRACT_DIR/fastdir__* | while read line; do echo $(basename $line) | sed 's/fastdir__//' ; done | fzf --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastdirs__{}' | grep 'd[0-9]'" --preview-window=wrap)"
        echo -ne "\nUse ${CTX_COLOR}[$base]${NC} as base for new ctx? [y/n] "
        user_resp=$(bash -c "read -n 1 c; echo \$c")
        if [ "$user_resp" == "y" ]; then
          cp "$FASTDIRACT_DIR/fastdirs__${base}" "$FASTDIRACT_DIR/fastdirs__${new_ctx}"
        fi
      else
        cat <<EOF > "$FASTDIRACT_DIR/fastdirs__${new_ctx}"
d0 =
d1 =
d2 =
d3 =
d4 =
d5 =
d6 =
d7 =
d8 =
d9 =
EOF
      fi
      unlink "$FASTDIR_FILE"
      ln -s "$FASTDIRACT_DIR/fastdirs__${new_ctx}" "$FASTDIR_FILE"
      echo -e "\nCreated and switched to new context ${CTX_COLOR}[$new_ctx]${NC}"
    fi
  fi
}

# dX() {
#   echo -n "Create new fastdir ctx? [y/n] "
#   user_resp=$(bash -c "read -n 1 c; echo \$c")
#   if [ "$user_resp" == "y" ]; then
#     echo -n "\nEnter new ctx name: "
#     read new_ctx
#     echo -ne "Use ${CTX_COLOR}[$new_ctx]${NC} as new ctx name? [y/n] "
#     user_resp=$(bash -c "read -n 1 c; echo \$c")
#     if [ "$user_resp" == "y" ]; then
#       base="$(ls -1 $FASTDIRACT_DIR/fastdir__* | while read line; do echo $(basename $line) | sed 's/fastdir__//' ; done | fzf --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastdirs__{}' | grep 'd[0-9]'" --preview-window=wrap)"
#       echo -ne "\nUse ${CTX_COLOR}[$base]${NC} as base for new ctx? [y/n] "
#       user_resp=$(bash -c "read -n 1 c; echo \$c")
#       if [ "$user_resp" == "y" ]; then
#         cp "$FASTDIRACT_DIR/fastdirs__${base}" "$FASTDIRACT_DIR/fastdirs__${new_ctx}"
#         unlink "$FASTDIR_FILE"
#         ln -s "$FASTDIRACT_DIR/fastdirs__${new_ctx}" "$FASTDIR_FILE"
#         echo -e "\nCreated and switched to new context ${CTX_COLOR}[$new_ctx]${NC}"
#       fi
#     fi
#   fi
# }

d-() {
  choice="$(ls -1 $FASTDIRACT_DIR/fastdir__* | while read line; do echo $(basename $line) | sed 's/fastdir__//' ; done | fzf --prompt="fastdir ctx to delete: " --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastdirs__{}' | grep 'd[0-9]'" --preview-window=wrap)"
  if [ "$(fastdiract_get_fastdir_ctx)" == "$choice" ]; then
    echo "Can't delete the current fastdir ctx; switch to another ctx first"
  else
    echo -ne "Delete fastdir ctx ${CTX_COLOR}[$choice]${NC}? [y/n] "
    user_resp=$(bash -c "read -n 1 c; echo \$c")
    if [ "$user_resp" == "y" ]; then
      rm "$FASTDIRACT_DIR/fastdirs__$choice"
      echo "\nDeleted fastdir ctx ${CTX_COLOR}[$choice]${NC}"
    fi
  fi
}

#######################
# Fastact Definitions #
#######################
alias f0='fastact_run $(cat $FASTACT_FILE | grep "f0 = " | cut -d"=" -f 2-)'
alias f1='fastact_run $(cat $FASTACT_FILE | grep "f1 = " | cut -d"=" -f 2-)'
alias f2='fastact_run $(cat $FASTACT_FILE | grep "f2 = " | cut -d"=" -f 2-)'
alias f3='fastact_run $(cat $FASTACT_FILE | grep "f3 = " | cut -d"=" -f 2-)'
alias f4='fastact_run $(cat $FASTACT_FILE | grep "f4 = " | cut -d"=" -f 2-)'
alias f5='fastact_run $(cat $FASTACT_FILE | grep "f5 = " | cut -d"=" -f 2-)'
alias f6='fastact_run $(cat $FASTACT_FILE | grep "f6 = " | cut -d"=" -f 2-)'
alias f7='fastact_run $(cat $FASTACT_FILE | grep "f7 = " | cut -d"=" -f 2-)'
alias f8='fastact_run $(cat $FASTACT_FILE | grep "f8 = " | cut -d"=" -f 2-)'
alias f9='fastact_run $(cat $FASTACT_FILE | grep "f9 = " | cut -d"=" -f 2-)'

# NOTE: When using f0.-f9., use single quotes to wrap the whole command
FASTDIRACT_SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
alias f0.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f0'
alias f1.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f1'
alias f2.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f2'
alias f3.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f3'
alias f4.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f4'
alias f5.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f5'
alias f6.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f6'
alias f7.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f7'
alias f8.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f8'
alias f9.='python $FASTDIRACT_SCRIPT_DIR/fastactions.py f9'
alias f?='echo -e "${CTX_COLOR}[$(fastdiract_get_fastact_ctx)]${NC}"; cat $FASTACT_FILE | grep "f[0-9]"'

f() {
  if [ "$FASTACT_F_RUNS_MENU" == "on" ]; then
    fm
  else
    f?
  fi
}

fm() {
  if ! [ "$#" == 1 -a "$1" == "quiet" ]; then
    f?
  fi
  echo -n "> "
  reply=$(bash -c "read -n 1 c; echo \$c")
  echo ""
  local cmd=""
  if [ "$reply" == "." ]; then
    echo -n "Enter cmd # to set: "
    cmdnum=$(bash -c "read -n 1 c; echo \$c")
    if [[ $cmdnum =~ [0-9] ]]; then
      setcmd="f${cmdnum}."
      echo -n "\nEnter cmd: "
      cmd=$(bash -c "read c; echo \$c")
      eval "$setcmd $cmd"
      f?
    else
      echo "\ninvalid cmd # $cmdnum"
    fi
  elif [ "$reply" == "w" ]; then
    fw
  elif [ "$reply" == "x" ]; then
    fx
  elif [ "$reply" == "X" ]; then
    fX
  elif [ "$reply" == "-" ]; then
    f-
  elif [[ "$reply" =~ [0-9] ]]; then
    cmd="f${reply}"
    if [ "$FASTACT_MENU_CONF" == "on" -a "$FASTACT_CONF" != "on" ]; then
      echo -n "Execute $cmd? [y/n] "
      user_resp=$(bash -c "read -n 1 c; echo \$c")
      if [ "$user_resp" == "y" ]; then
        echo ""
        eval "$cmd"
      fi
    else
      echo ""
      eval "$cmd"
    fi
  elif [ "$reply" == "?" ]; then
    echo "= COMMANDS ============================================="
    echo ". Set action   w Swap actions       x Change context"
    echo "? Show help    0-9 Execute action   X Create new context"
    echo "- Delete context"
    echo "========================================================"
    fm "quiet"
  else
    echo "invalid cmd \"$reply\""
  fi
}

fw() {
  echo "Swap actions:"
  echo -n "> "
  actnum1=$(bash -c "read -n 1 c; echo \$c")
  echo ""
  if [[ $actnum1 =~ [0-9] ]]; then
    echo -n "> "
    actnum2=$(bash -c "read -n 1 c; echo \$c")
    echo ""
    if [[ $actnum2 =~ [0-9] ]]; then
      act1="$(cat $FASTACT_FILE | grep 'f'${actnum1}' = ' | cut -d'=' -f 2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      act2="$(cat $FASTACT_FILE | grep 'f'${actnum2}' = ' | cut -d'=' -f 2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      # 2nd sed command is from
      # https://stackoverflow.com/questions/29613304/is-it-possible-to-escape-regex-metacharacters-reliably-with-sed
      # to escape metacharacters like &&.
      sed -i --follow-symlinks "s|f${actnum1} =.*$|f${actnum1} = $(sed 's/[&/\]/\\&/g' <<< $act2)|" $FASTACT_FILE
      sed -i --follow-symlinks "s|f${actnum2} =.*$|f${actnum2} = $(sed 's/[&/\]/\\&/g' <<< $act1)|" $FASTACT_FILE
      f?
    fi
  fi
}

fx() {
  choice="$(ls -1 $FASTDIRACT_DIR/fastact__* | while read line; do echo $(basename $line) | sed 's/fastact__//' ; done | fzf --prompt="Change fastaction ctx from [$(fastdiract_get_fastact_ctx)] to: " --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastactions__{}' | grep 'f[0-9]'" --preview-window=wrap)"
  # Test to handle case where fzf was cancelled
  if [ -n "$choice" ]; then
    unlink "$FASTACT_FILE"
    ln -s "$FASTDIRACT_DIR/fastactions__${choice}" "$FASTACT_FILE"
    f?
fi
}

fX() {
  echo -n "Create new fastaction ctx? [y/n] "
  user_resp=$(bash -c "read -n 1 c; echo \$c")
  if [ "$user_resp" == "y" ]; then
    echo -n "\nEnter new ctx name: "
    read new_ctx
    echo -ne "Use ${CTX_COLOR}[$new_ctx]${NC} as new ctx name? [y/n] "
    user_resp=$(bash -c "read -n 1 c; echo \$c")
    if [ "$user_resp" == "y" ]; then
      base="$(ls -1 $FASTDIRACT_DIR/fastact__* | while read line; do echo $(basename $line) | sed 's/fastact__//' ; done | fzf --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastactions__{}' | grep 'f[0-9]'" --preview-window=wrap)"
      echo -ne "\nUse ${CTX_COLOR}[$base]${NC} as base for new ctx? [y/n] "
      user_resp=$(bash -c "read -n 1 c; echo \$c")
      if [ "$user_resp" == "y" ]; then
        cp "$FASTDIRACT_DIR/fastactions__${base}" "$FASTDIRACT_DIR/fastactions__${new_ctx}"
        unlink "$FASTACT_FILE"
        ln -s "$FASTDIRACT_DIR/fastactions__${new_ctx}" "$FASTACT_FILE"
        echo -e "\nCreated and switched to new context ${CTX_COLOR}[$new_ctx]${NC}"
      fi
    fi
  fi
}

f-() {
  choice="$(ls -1 $FASTDIRACT_DIR/fastact__* | while read line; do echo $(basename $line) | sed 's/fastact__//' ; done | fzf --prompt="fastaction ctx to delete: " --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastactions__{}' | grep 'f[0-9]'" --preview-window=wrap)"
  if [ "$(fastdiract_get_fastaction_ctx)" == "$choice" ]; then
    echo "Can't delete the current fastaction ctx; switch to another ctx first"
  else
    echo -ne "Delete fastaction ctx ${CTX_COLOR}[$choice]${NC}? [y/n] "
    user_resp=$(bash -c "read -n 1 c; echo \$c")
    if [ "$user_resp" == "y" ]; then
      rm "$FASTDIRACT_DIR/fastactions__$choice"
      echo "\nDeleted fastaction ctx $choice"
    fi
  fi
}

#######################
# Fastvim Definitions #
#######################
alias v0='vim $(cat $FASTVIM_FILE | grep "v0 = " | cut -d"=" -f 2-)'
alias v1='vim $(cat $FASTVIM_FILE | grep "v1 = " | cut -d"=" -f 2-)'
alias v2='vim $(cat $FASTVIM_FILE | grep "v2 = " | cut -d"=" -f 2-)'
alias v3='vim $(cat $FASTVIM_FILE | grep "v3 = " | cut -d"=" -f 2-)'
alias v4='vim $(cat $FASTVIM_FILE | grep "v4 = " | cut -d"=" -f 2-)'
alias v5='vim $(cat $FASTVIM_FILE | grep "v5 = " | cut -d"=" -f 2-)'
alias v6='vim $(cat $FASTVIM_FILE | grep "v6 = " | cut -d"=" -f 2-)'
alias v7='vim $(cat $FASTVIM_FILE | grep "v7 = " | cut -d"=" -f 2-)'
alias v8='vim $(cat $FASTVIM_FILE | grep "v8 = " | cut -d"=" -f 2-)'
alias v9='vim $(cat $FASTVIM_FILE | grep "v9 = " | cut -d"=" -f 2-)'

# NOTE: When using v0.-v9., use single quotes to wrap the whole command
FASTVIM_SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
alias v0.='python $FASTVIM_SCRIPT_DIR/fastvim.py v0 $(pwd)'
alias v1.='python $FASTVIM_SCRIPT_DIR/fastvim.py v1 $(pwd)'
alias v2.='python $FASTVIM_SCRIPT_DIR/fastvim.py v2 $(pwd)'
alias v3.='python $FASTVIM_SCRIPT_DIR/fastvim.py v3 $(pwd)'
alias v4.='python $FASTVIM_SCRIPT_DIR/fastvim.py v4 $(pwd)'
alias v5.='python $FASTVIM_SCRIPT_DIR/fastvim.py v5 $(pwd)'
alias v6.='python $FASTVIM_SCRIPT_DIR/fastvim.py v6 $(pwd)'
alias v7.='python $FASTVIM_SCRIPT_DIR/fastvim.py v7 $(pwd)'
alias v8.='python $FASTVIM_SCRIPT_DIR/fastvim.py v8 $(pwd)'
alias v9.='python $FASTVIM_SCRIPT_DIR/fastvim.py v9 $(pwd)'
alias v?='echo -e "${CTX_COLOR}[$(fastdiract_get_fastvim_ctx)]${NC}"; cat $FASTVIM_FILE | grep "v[0-9]"'

v() {
 if [ "$FASTVIM_V_RUNS_MENU" == "on" ]; then
    vm
  else
    v?
  fi
}

vm() {
  if ! [ "$#" == 1 -a "$1" == "quiet" ]; then
    v?
  fi
  echo -n "> "
  reply=$(bash -c "read -n 1 c; echo \$c")
  echo ""
  local cmd=""
  if [ "$reply" == "." ]; then
    echo -n "Enter v # to set: "
    vnum=$(bash -c "read -n 1 c; echo \$c")
    if [[ $vnum =~ [0-9] ]]; then
      setfile="v${vnum}."
      echo -n "\nEnter file: "
      file=$(bash -c "read f; echo \$f")
      eval "$setfile $file"
      v?
    else
      echo "\ninvalid num # $vnum"
    fi
  elif [ "$reply" == "w" ]; then
    vw
  elif [ "$reply" == "x" ]; then
    vx
  elif [ "$reply" == "X" ]; then
    vX
  elif [ "$reply" == "-" ]; then
    v-
  elif [[ "$reply" =~ [0-9] ]]; then
    cmd="v${reply}"
    if [ "$FASTVIM_MENU_CONF" == "on" -a "$FASTVIM_CONF" != "on" ]; then
      echo -n "Execute $cmd? [y/n] "
      user_resp=$(bash -c "read -n 1 c; echo \$c")
      if [ "$user_resp" == "y" ]; then
        echo ""
        eval "$cmd"
      fi
    else
      echo ""
      eval "$cmd"
    fi
  elif [ "$reply" == "?" ]; then
    echo "= COMMANDS ============================================="
    echo ". Set vim file w Swap vim files      x Change context"
    echo "? Show help    0-9 Open file in vim  X Create new context"
    echo "- Delete context"
    echo "========================================================"
    vm "quiet"
  else
    echo "invalid cmd \"$reply\""
  fi
}

vw() {
  echo "Swap vims:"
  echo -n "> "
  vnum1=$(bash -c "read -n 1 c; echo \$c")
  echo ""
  if [[ $vnum1 =~ [0-9] ]]; then
    echo -n "> "
    vnum2=$(bash -c "read -n 1 c; echo \$c")
    echo ""
    if [[ $vnum2 =~ [0-9] ]]; then
      vimfile1="$(cat $FASTVIM_FILE | grep 'f'${vnum1}' = ' | cut -d'=' -f 2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      vimfile2="$(cat $FASTVIM_FILE | grep 'f'${vnum2}' = ' | cut -d'=' -f 2- | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
      # 2nd sed command is from
      # https://stackoverflow.com/questions/29613304/is-it-possible-to-escape-regex-metacharvimers-reliably-with-sed
      # to escape metacharacters like &&.
      sed -i --follow-symlinks "s|f${vnum1} =.*$|f${vnum1} = $(sed 's/[&/\]/\\&/g' <<< $vimfile2)|" $FASTVIM_FILE
      sed -i --follow-symlinks "s|f${vnum2} =.*$|f${vnum2} = $(sed 's/[&/\]/\\&/g' <<< $vimfile1)|" $FASTVIM_FILE
      v?
    fi
  fi
}

vx() {
  choice="$(ls -1 $FASTDIRACT_DIR/fastvim__* | while read line; do echo $(basename $line) | sed 's/fastvim__//' ; done | fzf --prompt="Change vim ctx from [$(fastdiract_get_fastvim_ctx)] to: " --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastvim__{}' | grep 'v[0-9]'" --preview-window=wrap)"
  # Test to handle case where fzf was cancelled
  if [ -n "$choice" ]; then
    unlink "$FASTVIM_FILE"
    ln -s "$FASTDIRACT_DIR/fastvim__${choice}" "$FASTVIM_FILE"
    v?
fi
}

vX() {
  echo -n "Create new vim ctx? [y/n] "
  user_resp=$(bash -c "read -n 1 c; echo \$c")
  if [ "$user_resp" == "y" ]; then
    echo -n "\nEnter new ctx name: "
    read new_ctx
    echo -ne "Use ${CTX_COLOR}[$new_ctx]${NC} as new ctx name? [y/n] "
    user_resp=$(bash -c "read -n 1 c; echo \$c")
    if [ "$user_resp" == "y" ]; then
      base="$(ls -1 $FASTDIRACT_DIR/fastvim__* | while read line; do echo $(basename $line) | sed 's/fastvim__//' ; done | fzf --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastvim__{}' | grep 'v[0-9]'" --preview-window=wrap)"
      echo -ne "\nUse ${CTX_COLOR}[$base]${NC} as base for new ctx? [y/n] "
      user_resp=$(bash -c "read -n 1 c; echo \$c")
      if [ "$user_resp" == "y" ]; then
        cp "$FASTDIRACT_DIR/fastvim__${base}" "$FASTDIRACT_DIR/fastvim__${new_ctx}"
        unlink "$FASTVIM_FILE"
        ln -s "$FASTDIRACT_DIR/fastvim__${new_ctx}" "$FASTVIM_FILE"
        echo -e "\nCreated and switched to new context ${CTX_COLOR}[$new_ctx]${NC}"
      fi
    fi
  fi
}

v-() {
  choice="$(ls -1 $FASTDIRACT_DIR/fastvim__* | while read line; do echo $(basename $line) | sed 's/fastvim__//' ; done | fzf --prompt="vim ctx to delete: " --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastvim__{}' | grep 'v[0-9]'" --preview-window=wrap)"
  if [ "$(fastdiract_get_fastvim_ctx)" == "$choice" ]; then
    echo "Can't delete the current vim ctx; switch to another ctx first"
  else
    echo -ne "Delete vim ctx ${CTX_COLOR}[$choice]${NC}? [y/n] "
    user_resp=$(bash -c "read -n 1 c; echo \$c")
    if [ "$user_resp" == "y" ]; then
      rm "$FASTDIRACT_DIR/fastvim__$choice"
      echo "\nDeleted vim ctx $choice"
    fi
  fi
}


gx() {
  choice="$(ls -1 $FASTDIRACT_DIR/fastgdb__* | while read line; do echo $(basename $line) | sed 's/fastgdb__//' ; done | fzf --prompt="Change gdb ctx from [$(fastdiract_get_fastgdb_ctx)] to: " --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastgdb__{}' | grep 'v[0-9]'" --preview-window=wrap)"
  # Test to handle case where fzf was cancelled
  if [ -n "$choice" ]; then
    unlink "$FASTGDB_FILE"
    ln -s "$FASTDIRACT_DIR/fastgdb__${choice}" "$FASTGDB_FILE"
    v?
fi
}

gX() {
  echo -n "Create new gdb ctx? [y/n] "
  user_resp=$(bash -c "read -n 1 c; echo \$c")
  if [ "$user_resp" == "y" ]; then
    echo -n "\nEnter new ctx name: "
    read new_ctx
    echo -ne "Use ${CTX_COLOR}[$new_ctx]${NC} as new ctx name? [y/n] "
    user_resp=$(bash -c "read -n 1 c; echo \$c")
    if [ "$user_resp" == "y" ]; then
      base="$(ls -1 $FASTDIRACT_DIR/fastgdb__* | while read line; do echo $(basename $line) | sed 's/fastgdb__//' ; done | fzf --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastgdb__{}' | grep 'v[0-9]'" --preview-window=wrap)"
      echo -ne "\nUse ${CTX_COLOR}[$base]${NC} as base for new ctx? [y/n] "
      user_resp=$(bash -c "read -n 1 c; echo \$c")
      if [ "$user_resp" == "y" ]; then
        cp "$FASTDIRACT_DIR/fastgdb__${base}" "$FASTDIRACT_DIR/fastgdb__${new_ctx}"
        unlink "$FASTGDB_FILE"
        ln -s "$FASTDIRACT_DIR/fastgdb__${new_ctx}" "$FASTGDB_FILE"
        echo -e "\nCreated and switched to new context ${CTX_COLOR}[$new_ctx]${NC}"
      fi
    fi
  fi
}

g-() {
  choice="$(ls -1 $FASTDIRACT_DIR/fastgdb__* | while read line; do echo $(basename $line) | sed 's/fastgdb__//' ; done | fzf --prompt="gdb ctx to delete: " --preview="echo -e '${CTX_COLOR}[{}]${NC}'; cat '$FASTDIRACT_DIR/fastgdb__{}' | grep 'v[0-9]'" --preview-window=wrap)"
  if [ "$(fastdiract_get_fastgdb_ctx)" == "$choice" ]; then
    echo "Can't delete the current gdb ctx; switch to another ctx first"
  else
    echo -ne "Delete gdb ctx ${CTX_COLOR}[$choice]${NC}? [y/n] "
    user_resp=$(bash -c "read -n 1 c; echo \$c")
    if [ "$user_resp" == "y" ]; then
      rm "$FASTDIRACT_DIR/fastgdb__$choice"
      echo "\nDeleted gdb ctx $choice"
    fi
  fi
}
